#+TITLE: Notes

* List of Free Learning Resources In Many Languages
[[https://github.com/EbookFoundation/free-programming-books][List of Free Learning Resources In Many Languages]]


* Great books

- [[http://craftinginterpreters.com/][Crafting Interpreters]]
- [[http://gameprogrammingpatterns.com/][Game Programming Patterns]]
- [[https://mitpress.mit.edu/sites/default/files/sicp/index.html][Welcome to the SICP Web Site]]


* Bash snippets
#+begin_src bash
$ for i in *.TD0; do samdisk copy ${i} ${i/.TD0/.RAW}; done
#+end_src


* C

** Books
- [[http://www.buildyourownlisp.com/][Learn C • Build Your Own Lisp]]
- [[http://www.craftinginterpreters.com/][Crafting Interpreters]]
- [[https://littleosbook.github.io/][The little book about OS development]]
- [[https://tuhdo.github.io/os01/][os01 | Bootstrap yourself to write an OS from scratch. A book for self-learner.]]
- [[http://beej.us/guide/bgnet/html/multi/index.html][Beej's Guide to Network Programming]]
- [[https://www.amazon.com/dp/1484209966/][Amazon.com: Sudoku Programming with C: 9781484209967: Zambon, Giulio: Books]]
- [[https://www.amazon.com/dp/1545484759/][Amazon.com: Making 8-bit Arcade Games in C: 9781545484753: Hugg, Steven: Books]]
- [[https://www.amazon.com/dp/0805316701/][Amazon.com: Retargetable C Compiler, A: Design and Implementation: 9780805316...]]
- [[https://www.amazon.com/dp/1539692876/][Game Engine Black Book: Wolfenstein 3D: Sanglard, Fabien: 9781539692874: Amaz...]] 

** Articles
- [[https://cstack.github.io/db_tutorial/][How Does a Database Work? | Let’s Build a Simple Database]]
- [[https://blog.lizzie.io/linux-containers-in-500-loc.html][Linux containers in 500 lines of code]]
- [[https://danluu.com/malloc-tutorial/][Malloc tutorial]]
- [[https://www.cs.princeton.edu/courses/archive/spr09/cos333/beautiful.html][A Regular Expression Matcher]]
- [[https://brennan.io/2015/01/16/write-a-shell-in-c/][Tutorial - Write a Shell in C • Stephen Brennan]]
- [[https://www.cs.nmsu.edu/~pfeiffer/fuse-tutorial/][Writing a FUSE Filesystem: a Tutorial]]
- [[https://viewsourcecode.org/snaptoken/kilo/][Build Your Own Text Editor]]
- [[https://github.com/jamesroutley/write-a-hash-table][GitHub - jamesroutley/write-a-hash-table: ✏️ Learn how to write a hash table ...]]
- [[https://arjunsreedharan.org/post/82710718100/kernel-101-lets-write-a-kernel][Kernels 101 – Let’s write a Kernel - Arjun Sreedharan]]
- [[https://nesdoug.com/][nesdoug – NES Programming with cc65]]
- [[http://journal.stuffwithstuff.com/2013/12/08/babys-first-garbage-collector/][Baby’s First Garbage Collector – journal.stuffwithstuff.com]]
- [[https://felix.engineer/blogs/virtual-machine-in-c][Implementing a virtual machine in C]]
- [[http://peter.michaux.ca/articles/scheme-from-scratch-introduction][peter.michaux.ca - Scheme from Scratch - Introduction]]
- [[https://norasandler.com/2017/11/29/Write-a-Compiler.html][Writing a C Compiler, Part 1]]
- [[http://www.saminiir.com/lets-code-tcp-ip-stack-1-ethernet-arp/][Let's code a TCP/IP stack, 1: Ethernet & ARP]]
- [[https://github.com/lotabout/write-a-C-interpreter][GitHub - lotabout/write-a-C-interpreter: Write a simple interpreter of C. Ins...]]
- [[https://blog.holbertonschool.com/hack-virtual-memory-stack-registers-assembly-code/][Hack the virtual memory: the stack, registers and assembly code - Blog Holber...]]
- [[http://www.gamedevcraft.com/2016/08/part-1-multiplayer-websocket-game.html][Multiplayer WebSocket Game server written in C]]
- [[http://emulator101.com/][Emulator 101]]
- [[https://helderman.github.io/htpataic/htpataic01.html][How to Program a Text Adventure in C]]
- [[http://www.linuxfromscratch.org/][Welcome to Linux From Scratch!]]
- [[http://www.catb.org/esr/structure-packing/][The Lost Art of Structure Packing]]
- [[https://www.a1k0n.net/2011/07/20/donut-math.html][Donut math: how donut.c works – a1k0n.net]]

** Video Series
- [[https://www.youtube.com/playlist?list=PLZ1QII7yudbc-Ky058TEaOstZHVbT-2hg][Chess Engine In C - YouTube]]
- [[https://www.youtube.com/playlist?list=PLT6WFYYZE6uLMcPGS3qfpYm7T_gViYMMt][Learn Video Game Programming in C - YouTube]]
- [[https://www.youtube.com/playlist?list=PLSkJey49cOgTSj465v2KbLZ7LMn10bCF9][Let's Make: Dangerous Dave - YouTube]]
- [[https://www.youtube.com/playlist?list=PLkTXsX7igf8edTYU92nU-f5Ntzuf-RKvW][Coding A Sudoku Solver in C - YouTube]]
- [[https://www.youtube.com/playlist?list=PLkTXsX7igf8erbWGYT4iSAhpnJLJ0Nk5G][Coding a Rogue/Nethack RPG in C - YouTube]]
- [[https://www.udemy.com/learn-socket-programming-in-c-from-scratch/][Learn Socket Programming in C from Scratch | Udemy]]
- [[https://github.com/pervognsen/bitwise][GitHub - pervognsen/bitwise: Bitwise is an educational project where we creat...]]
- [[https://handmadehero.org/][Handmade Hero]]

*** Donut
- [[https://www.youtube.com/watch?v=BXSZ4_DKCBw][Refactoring A Donut! | De-obfuscated C Challenge - YouTube]]
- [[https://www.youtube.com/watch?v=DEqXNfs_HhY][Donut-shaped C code that generates a 3D spinning donut - YouTube]]
-[[https://www.youtube.com/watch?v=sW9npZVpiMI][ why you NEED math for programming - YouTube]]


** Pitfalls
*** Do not cast an address that is not surely 32-bit aligned to a 32-bit pointer

#+begin_src c
//uint32_t addr = *((uint32_t*)(&my_struct.address));
// Do not cast an address that is not surely 32-bit aligned to a 32-bit pointer,
// because on ARM architecture the result is undefined.
//
// using memcpy() instead:
uint32_t addr;
memcpy(&addr,&my_struct.address,sizeof(uint32_t));
#+end_src

See also: [[https://stackoverflow.com/questions/227897/how-to-allocate-aligned-memory-only-using-the-standard-library][c - How to allocate aligned memory only using the standard library? - Stack O...]]

Also related: GCC has a warning that can help to identify points in the code
when we might be accessing unaligned data, which is activated with
~-Wcast-align~. It is not part of the warnings that are activated by options
~-Wall~ or ~-Wextra~, so we will have to add it explicitly if we want it. The
warning is only triggered when compiling for architectures that do not support
unaligned access for all types, so you will not see it if compiling only for
x86.

See also: [[https://www.alfonsobeato.net/arm/how-to-access-safely-unaligned-data/][How to Access Safely Unaligned Data – Alfonso Sánchez-Beato's blog]]

** Interesting. Should take a look sometime:
*** [[https://justine.lol/cosmopolitan/][Cosmopolitan Libc: build-once run-anywhere C library]]
*** [[https://justine.lol/ftrace/][Logging C Function Calls]]
*** [[https://embetronicx.com/tutorials/linux/device-drivers/threaded-irq-in-linux-kernel/][Threaded IRQ in Linux Kernel - Linux Device Driver Tutorial Part 46]]
*** [[https://embetronicx.com/tutorials/linux/device-drivers/][Device Drivers Archives ⋆ EmbeTronicX]]

** [[https://pvs-studio.com/en/blog/posts/cpp/0391/][The Ultimate Question of Programming, Refactoring, and Everything]]

* C++

** C++ Developer Roadmap
[[https://github.com/salmer/CppDeveloperRoadmap][Roadmap]] for learning the C++ programming language for beginners and experienced devs.

** C++ Game Programming course
Entire [[https://www.reddit.com/r/cpp/comments/r837rn/my_entire_c_game_programming_course_is_now/][C++ Game Programming course]] is now available online for free. Make your own 2D game engine from scratch using ECS

** Cᐩᐩ Weekly With Jason Turner
[[https://www.youtube.com/c/lefticus1/about][Making C++ Fun and Accessible.]]

** The Cherno
C++ YouTube [[https://www.youtube.com/playlist?list=PLlrATfBNZ98dudnM48yfGUldqGD0S4FFb][playlist]]

** SerenityOS
[[https://www.youtube.com/c/AndreasKling/playlists][SerenityOS]], a new from-scratch graphical operating system for desktop computers.

** Watch and learn
[[https://github.com/Bu11etmagnet/WatchAndLearn][Watch and learn]] - a collection of presentations about programming, almost exclusively related to C++

** C++ Core Guidelines
[[https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines][This document]] is a set of guidelines for using C++ well. The aim of this document is to help people to use modern C++ effectively.

** Cheat Sheets & Infographics
[[https://hackingcpp.com/cpp/cheat_sheets.html][Cheat Sheets & Infographics]] is a collection of various C++ learning resources. Most materials are aimed at beginners that know the basics of imperative programming but don't know C++ very well.

** Teaching C++ using org
[[https://github.com/dmgerman/csc116ModernCplusplus][csc116ModernCplusplus]]

** [[https://www.jacksondunstan.com/articles/5530][JacksonDunstan.com | C++ For C# Developers: Part 1 – Introduction]]

** Learn these: QT, SFML, SDL2 and GLFW. What should be the order?

** [[https://hackingcpp.com/index.html][Learn Contemporary C++ | Concise&Visual Examples | hacking C++]]

** [[https://luckyresistor.me/knowledge/learn-cpp/][Learn C++ - Lucky Resistor]]

** [[https://www.etlcpp.com/][Embedded Template Library]]

** Books

*** A Tour of C++
Reading Notes
[[https://ianyepan.github.io/posts/cpp-notes-pt1/][A Tour of C++ - Reading Notes (Part 1/2) | Ian Y.E. Pan]]
[[https://ianyepan.github.io/posts/cpp-notes-pt2/][A Tour of C++ - Reading Notes (Part 2/2) | Ian Y.E. Pan]]

** Game Programming

*** [[https://www.youtube.com/playlist?list=PLSPw4ASQYyynKPY0I-QFHK0iJTjnvNUys][C++/Game Tutorials - YouTube]]

*** [[https://www.youtube.com/playlist?list=PLSPw4ASQYyymu3PfG9gxywSPghnSMiOAW][Advanced C++/Graphics Tutorials - YouTube]]

*** [[https://lazyfoo.net/tutorials/SDL/index.php][Lazy Foo' Productions - Beginning Game Programming v2.0]]

* Go
- [[https://quii.gitbook.io/learn-go-with-tests/][Learn Go with Tests - Learn Go with tests]]
- [[https://gobyexample.com/][Go by Example]]
- [[https://go.dev/tour/list][A Tour of Go]]

* Rust
- [[https://doc.rust-lang.org/book/index.html][The Rust Programming Language - The Rust Programming Language]]
- [[https://doc.rust-lang.org/rust-by-example/index.html][Introduction - Rust By Example]]
- [[https://github.com/rust-lang/rustlings][GitHub - rust-lang/rustlings: Small exercises to get you used to reading and ...]]
- [[https://eli.thegreenplace.net/2022/how-i-went-about-learning-rust/][How I went about learning Rust - Eli Bendersky's website]]
- [[https://loige.co/where-to-go-to-learn-rust-in-2021/][Where to go to learn Rust in 2021]]

* Microsoft

** [[https://github.com/microsoft/Data-Science-For-Beginners][Data Science for Beginners]]

** [[https://github.com/microsoft/IoT-For-Beginners][IoT for Beginners]]

** [[https://github.com/microsoft/ML-For-Beginners][Machine Learning for Beginners]]

** [[https://github.com/microsoft/Web-Dev-For-Beginners][Web Dev for Beginners]]

* Online Programming

- [[https://www.hackerrank.com/][HackerRank]]
- [[https://projecteuler.net/archives][Project Euler - Archived Problems]]
- [[https://app.codility.com/programmers/lessons/1-iterations/][Codility - Learn to Code]]
- [[https://leetcode.com/][LeetCode - The World's Leading Online Programming Learning Platform]]
- [[https://exercism.org/][Exercism]]
- [[https://codecrafters.io/][Build your own X. Master any language.]]
- [[https://mlpro.io/problems/][All Problems | MLPro]]
- [[https://github.com/gamontal/awesome-katas][GitHub - gamontal/awesome-katas: A curated list of code katas]]
- [[https://github.com/ahmdrefat/awesome-koans][GitHub - ahmdrefat/awesome-koans: A list of all available kōans]]

* Stock Market
** [[https://github.com/ckz8780/market-toolkit][GitHub - ckz8780/market-toolkit: A collection of stock market resources and t...]]

* Online Jobs
- [[https://tiermaker.com/list/technology/best-big-tech-company-to-work-for-ranked-by-hackpack--1657601/2127463][Tech Interview Difficulty - TierMaker]]
- [[https://www.upwork.com/][Upwork | The World’s Work Marketplace]]


* Git

- [[https://learngitbranching.js.org/][Learn Git Branching]]
- [[https://ohmygit.org/][Oh My Git!]]


* Kotlin & Android

** Developing Android Apps with Kotlin
[[https://classroom.udacity.com/courses/ud9012][Developing Android Apps with Kotlin]]

** Awesome Android Learning Resources
A curated list of [[https://github.com/androiddevnotes/awesome-android-learning-resources][awesome android learning resources]] for android app developers.

** Android Developer Roadmap 2022
The 2022 [[https://github.com/skydoves/android-developer-roadmap][Android Developer Roadmap]] suggests learning paths to understanding Android development.

** [[https://www.udacity.com/course/kotlin-bootcamp-for-programmers--ud9011][Kotlin Bootcamp for Programmers | Udacity Free Courses]]

** [[https://developer.android.com/courses/pathways/android-architecture][Modern Android App Architecture  |  Android Developers]]

** [[https://medium.com/the-android-caf%C3%A9/solid-principles-the-kotlin-way-ff717c0d60da][Solid Principles | Vijay Mishra | Kotlin Design Patterns | The Android Cafe]]


* Debian/Ubuntu

** Create a list of all installed packages

To create a list of the names of all installed packages on your Ubuntu or Debian system and save it in a file named packages_list.txt, run the following command:

#+begin_src shell
sudo dpkg-query -f '${binary:Package}\n' -W > packages_list.txt
#+end_src

Now that you have the list, if you want to install the same packages on your new server you can do that with:

#+begin_src shell
sudo xargs -a packages_list.txt apt install
#+end_src


* Research
** [[https://github.com/vikasrawal/orgpaper/blob/master/orgpapers.org][orgpaper/orgpapers.org at master · vikasrawal/orgpaper · GitHub]]
** [[https://emacsconf.org/2021/talks/research/][EmacsConf - 2021 - talks - Managing a research workflow (bibliographies, note...]]
** [[https://www.bloomberg.com/news/articles/2022-04-01/employees-are-returning-to-office-post-covid-just-to-sit-on-zoom-calls][Benefits of Working From Office: Workers Back to Desks Just to Sit on Zoom Ca...]]
** [[https://cobriant.github.io/emacs_presentation.html][Research with Org-mode for Emacs]]
** [[http://www.wouterspekkink.org/academia/writing/tool/doom-emacs/2021/02/27/writing-academic-papers-with-org-mode.html][Writing academic papers with org-mode]]
** [[https://github.com/GeneKao/orgmode-latex-templates][My org-mode starter codes for exporting to latex/pdf ]]
** [[https://jonathanabennett.github.io/blog/2019/05/29/writing-academic-papers-with-org-mode/][Writing Academic Papers with Org-mode - Jonathan Bennett's Blog]]
** [[https://gitlab.com/nathanfurnal/dotemacs][Nathan Furnal / dotemacs · GitLab]]
** [[https://www.linuxjournal.com/content/org-mode-latex-exporter-latex-non-texers][The org-mode LaTeX exporter: LaTeX for non-TEXers | Linux Journal]]
** [[https://rgoswami.me/posts/org-note-workflow/][An Orgmode Note Workflow :: Rohit Goswami — Reflections]]
** [[https://lucidmanager.org/categories/productivity/][More productive with Emacs: Write websites, articles and books]]
** [[https://blog.tecosaur.com/tmio/2021-07-31-citations.html][This Month in Org - July 2021 - Introducing citations!]]


* NixOS

** builds everything from source if Nix user isn't trusted
#+begin_quote
warning: ignoring untrusted substituter 'https://cachix.cachix.org'
#+end_quote

Workaround:
#+begin_src shell
echo "trusted-users = root $USER" | sudo tee -a /etc/nix/nix.conf"
sudo pkill nix-daemon
#+end_src

** [[https://christine.website/blog/nix-flakes-1-2022-02-21][Nix Flakes: an Introduction - Xe]]

** To enable Nix flakes on your machine.

*** If you are using NixOS, add this to your configuration.nix file:

#+begin_src nix
nix = {
  package = pkgs.nixFlakes;
  extraOptions = ''
    experimental-features = nix-command flakes
  '';
};
#+end_src

Then rebuild your system and you can continue along with the article.

*** If you are not on NixOS, you will need to either edit ~/.config/nix/nix.conf or /etc/nix/nix.conf and add the following line to it:

#+begin_src bash
experimental-features = nix-command flakes
#+end_src

You may need to restart the Nix daemon here with sudo systemctl restart
nix-daemon.service, but if you are unsure how Nix was set up on that non-NixOS
machine feel free to totally restart your computer.


* WSL

** Convenience

Run the following script after putting in your user name

#+begin_src shell
for i in Desktop Documents Downloads Videos Music Pictures; do
  ln -s /mnt/c/Users/<username>/$i ~
done
#+end_src

** How to Mount Windows Network Drives in WSL

*** Mount a Drive Until Logoff

1. Note the letter of the network drive that you would like to map in WSL. We will use M: in this example.
2. Create a new folder for that drive letter under /mnt if it does not already exist. (ex: ~mkdir /mnt/m~)
3. Mount the drive with ~sudo mount -t drvfs M: /mnt/m~


*** Mount Drives in a Persistent Manner

1. Ensure the folder exists for the mount target (e.g. /mnt/m)
2. Open /etc/fstab and add a line such as the following:
   M: /mnt/m drvfs defaults 0 0
3. Reload the fstab file with ~sudo mount -a~

** How to Shrink a WSL2 Virtual Disk

*** Zeroing a VHDX with an ext Filesystem
Because the VHDX cannot parse the file system, it can only remove blocks that
contain all zeros. With that knowledge, we now have a goal: zero out unused
blocks. We’ll need to do that from within the guest.

#+begin_src shell
sudo fstrim /
#+end_src

*** Before you begin

Before shrinking a WSL2 virtual disk, you need to ensure that WSL2 is not running.

You can check if it’s running with the command ~wsl.exe --list --verbose~ in PowerShell.
It should stop when it’s idle, or you can encourage it to stop with the ~wsl.exe --terminate~ command.

*** Use ~diskpart~ to Shrink a WSL2 Virtual Disk

You can launch the ~diskpart~ tool in ~PowerShell~.

You need to specify the path to your VHDX file.
#+begin_src powershell
select vdisk file="C:\Users\valorin\AppData\Local\Packages\WhitewaterFoundryLtd.Co.16571368D6CFF_kd...\LocalState\ext4.vhdx"
#+end_src

Once it’s selected, you can ask ~diskpart~ to compact it:
#+begin_src powershell
compact vdisk
#+end_src

Once that has finished, you can close ~diskpart~.

** WSL2 X11 programs "disappear"
[[https://github.com/nbdd0121/wsld][WSL Daemon - Stable X11 connection and time synchronisation for WSL2]]

** Launch file with a WSL App
[[https://github.com/mangelozzi/explorer_launch_wsl_app][Script]] to enable double click a file in explorer and launch/run it with a WSL App (Neovim, Vim, etc) within Windows Terminal

** Launching WSL Programs from a Right Click Windows Menu
[[https://nickjanetakis.com/blog/launching-wsl-programs-from-a-right-click-windows-menu][Launching and running]] a WSL command


* Start a TFTP server on your Mac
** To change the properties, edit the file ~/System/Library/LaunchDaemons/tftp.plist~
** The default directory is ~/private/tftpboot~.
Make this directory accessible for everybody.
#+begin_src shell
sudo chmod 777 /private/tftpboot
#+end_src
** and start it with
#+begin_src shell
sudo launchctl load -F /System/Library/LaunchDaemons/tftp.plist
#+end_src
** If you want to stop the daemon, do
#+begin_src shell
sudo launchctl unload /System/Library/LaunchDaemons/tftp.plist
#+end_src
** Check if its running (no process means it not running)
#+begin_src shell
netstat -atp UDP | grep tftp
#+end_src

* How to reduce the size of VMware disk

#+begin_src sh
sudo vmware-toolbox-cmd disk shrink /
#+end_src


* [[https://www.adamconrad.dev/blog/changing-jobs-during-the-great-resignation/][Changing jobs during the Great Resignation - Adam C. Conrad]]


* Interview Questions to Ask Your Interviewer
How big is the company?

Why did you choose to work here?

Do you enjoy this particular project?

Is there flexibility within the org to move around to different projects?

What's a typical day like?


Software dev process? (agile/tdd/pairing?)

Bug tracking system?

Version control system?

Dev. desktop vs server OS? Developer machine hardware?


Is the product live in production? If not, what's the schedule for developing it?

How often are releases done?

Who supports the product once it's released? Pager duty? Monitoring email?

Where do feature + bugfix requests come from?

Who does the "design" of the product? Internal designers, devs, both?

Would my work be full-stack, or focused on backend/frontend?

How big is the code base? Lots of ties to external/legacy projects?


Typical working hours? Flexibility? Crunch times?

Working from home? Regularly vs. Snow days?


Do you have a favorite part of the job? Least favorite?

Do you have a time tracking system?

Centralized IT dept?

Gov’t contractor? Clearance required? Potential for clearance?

Regulatory compliance? PCI, SOX, etc. Annual training?


Do people hang out outside work? Company outings? Lunch?

Budget for conferences?

Internal lightning talks/brown bag lunches?

Dress code?


Does the company seem stable? Profitable? Any plans to sell?

Bonus structure?

Management style/structure? Frequent catch-ups aka one-on-ones? Something else?

Room for advancement?

Learning opportunities?
